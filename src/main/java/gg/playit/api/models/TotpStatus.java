/*
 * playit.gg's api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: unstable
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package gg.playit.api.models;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import gg.playit.api.models.TotpStatusOneOf;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;



import java.io.IOException;
import java.lang.reflect.Type;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.JsonPrimitive;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonSerializationContext;
import com.google.gson.JsonSerializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonArray;
import com.google.gson.JsonParseException;

import gg.playit.JSON;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-02-08T12:14:41.539310597-08:00[America/Los_Angeles]")
public class TotpStatus extends AbstractOpenApiSchema {
    private static final Logger log = Logger.getLogger(TotpStatus.class.getName());

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!TotpStatus.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'TotpStatus' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<TotpStatusOneOf> adapterTotpStatusOneOf = gson.getDelegateAdapter(this, TypeToken.get(TotpStatusOneOf.class));

            return (TypeAdapter<T>) new TypeAdapter<TotpStatus>() {
                @Override
                public void write(JsonWriter out, TotpStatus value) throws IOException {
                    if (value == null || value.getActualInstance() == null) {
                        elementAdapter.write(out, null);
                        return;
                    }

                    // check if the actual instance is of the type `TotpStatusOneOf`
                    if (value.getActualInstance() instanceof TotpStatusOneOf) {
                      JsonElement element = adapterTotpStatusOneOf.toJsonTree((TotpStatusOneOf)value.getActualInstance());
                      elementAdapter.write(out, element);
                      return;
                    }
                    throw new IOException("Failed to serialize as the type doesn't match oneOf schemas: TotpStatusOneOf");
                }

                @Override
                public TotpStatus read(JsonReader in) throws IOException {
                    Object deserialized = null;
                    JsonElement jsonElement = elementAdapter.read(in);

                    int match = 0;
                    ArrayList<String> errorMessages = new ArrayList<>();
                    TypeAdapter actualAdapter = elementAdapter;

                    // deserialize TotpStatusOneOf
                    try {
                      // validate the JSON object to see if any exception is thrown
                      TotpStatusOneOf.validateJsonElement(jsonElement);
                      actualAdapter = adapterTotpStatusOneOf;
                      match++;
                      log.log(Level.FINER, "Input data matches schema 'TotpStatusOneOf'");
                    } catch (Exception e) {
                      // deserialization failed, continue
                      errorMessages.add(String.format("Deserialization for TotpStatusOneOf failed with `%s`.", e.getMessage()));
                      log.log(Level.FINER, "Input data does not match schema 'TotpStatusOneOf'", e);
                    }

                    if (match == 1) {
                        TotpStatus ret = new TotpStatus();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    }

                    throw new IOException(String.format("Failed deserialization for TotpStatus: %d classes match result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", match, errorMessages, jsonElement.toString()));
                }
            }.nullSafe();
        }
    }

    // store a list of schema names defined in oneOf
    public static final Map<String, Class<?>> schemas = new HashMap<String, Class<?>>();

    public TotpStatus() {
        super("oneOf", Boolean.FALSE);
    }

    public TotpStatus(TotpStatusOneOf o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    static {
        schemas.put("TotpStatusOneOf", TotpStatusOneOf.class);
    }

    @Override
    public Map<String, Class<?>> getSchemas() {
        return TotpStatus.schemas;
    }

    /**
     * Set the instance that matches the oneOf child schema, check
     * the instance parameter is valid against the oneOf child schemas:
     * TotpStatusOneOf
     *
     * It could be an instance of the 'oneOf' schemas.
     */
    @Override
    public void setActualInstance(Object instance) {
        if (instance instanceof TotpStatusOneOf) {
            super.setActualInstance(instance);
            return;
        }

        throw new RuntimeException("Invalid instance type. Must be TotpStatusOneOf");
    }

    /**
     * Get the actual instance, which can be the following:
     * TotpStatusOneOf
     *
     * @return The actual instance (TotpStatusOneOf)
     */
    @Override
    public Object getActualInstance() {
        return super.getActualInstance();
    }

    /**
     * Get the actual instance of `TotpStatusOneOf`. If the actual instance is not `TotpStatusOneOf`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `TotpStatusOneOf`
     * @throws ClassCastException if the instance is not `TotpStatusOneOf`
     */
    public TotpStatusOneOf getTotpStatusOneOf() throws ClassCastException {
        return (TotpStatusOneOf)super.getActualInstance();
    }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to TotpStatus
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    // validate oneOf schemas one by one
    int validCount = 0;
    ArrayList<String> errorMessages = new ArrayList<>();
    // validate the json string with TotpStatusOneOf
    try {
      TotpStatusOneOf.validateJsonElement(jsonElement);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for TotpStatusOneOf failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    if (validCount != 1) {
      throw new IOException(String.format("The JSON string is invalid for TotpStatus with oneOf schemas: TotpStatusOneOf. %d class(es) match the result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", validCount, errorMessages, jsonElement.toString()));
    }
  }

 /**
  * Create an instance of TotpStatus given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of TotpStatus
  * @throws IOException if the JSON string is invalid with respect to TotpStatus
  */
  public static TotpStatus fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TotpStatus.class);
  }

 /**
  * Convert an instance of TotpStatus to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

