/*
 * playit.gg's api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: unstable
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package gg.playit.api.models;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import gg.playit.api.models.PortType;
import gg.playit.api.models.TunnelCreateUseAllocation;
import gg.playit.api.models.TunnelOriginCreate;
import gg.playit.api.models.TunnelType;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import gg.playit.JSON;

/**
 * ReqTunnelsCreate
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class ReqTunnelsCreate {
  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_TUNNEL_TYPE = "tunnel_type";
  @SerializedName(SERIALIZED_NAME_TUNNEL_TYPE)
  private TunnelType tunnelType;

  public static final String SERIALIZED_NAME_PORT_TYPE = "port_type";
  @SerializedName(SERIALIZED_NAME_PORT_TYPE)
  private PortType portType;

  public static final String SERIALIZED_NAME_PORT_COUNT = "port_count";
  @SerializedName(SERIALIZED_NAME_PORT_COUNT)
  private BigDecimal portCount;

  public static final String SERIALIZED_NAME_ORIGIN = "origin";
  @SerializedName(SERIALIZED_NAME_ORIGIN)
  private TunnelOriginCreate origin;

  public static final String SERIALIZED_NAME_ENABLED = "enabled";
  @SerializedName(SERIALIZED_NAME_ENABLED)
  private Boolean enabled;

  public static final String SERIALIZED_NAME_ALLOC = "alloc";
  @SerializedName(SERIALIZED_NAME_ALLOC)
  private TunnelCreateUseAllocation alloc;

  public static final String SERIALIZED_NAME_FIREWALL_ID = "firewall_id";
  @SerializedName(SERIALIZED_NAME_FIREWALL_ID)
  private String firewallId;

  public ReqTunnelsCreate() {
  }

  public ReqTunnelsCreate name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public ReqTunnelsCreate tunnelType(TunnelType tunnelType) {
    this.tunnelType = tunnelType;
    return this;
  }

   /**
   * Get tunnelType
   * @return tunnelType
  **/
  @javax.annotation.Nullable
  public TunnelType getTunnelType() {
    return tunnelType;
  }

  public void setTunnelType(TunnelType tunnelType) {
    this.tunnelType = tunnelType;
  }


  public ReqTunnelsCreate portType(PortType portType) {
    this.portType = portType;
    return this;
  }

   /**
   * Get portType
   * @return portType
  **/
  @javax.annotation.Nonnull
  public PortType getPortType() {
    return portType;
  }

  public void setPortType(PortType portType) {
    this.portType = portType;
  }


  public ReqTunnelsCreate portCount(BigDecimal portCount) {
    this.portCount = portCount;
    return this;
  }

   /**
   * Get portCount
   * @return portCount
  **/
  @javax.annotation.Nonnull
  public BigDecimal getPortCount() {
    return portCount;
  }

  public void setPortCount(BigDecimal portCount) {
    this.portCount = portCount;
  }


  public ReqTunnelsCreate origin(TunnelOriginCreate origin) {
    this.origin = origin;
    return this;
  }

   /**
   * Get origin
   * @return origin
  **/
  @javax.annotation.Nonnull
  public TunnelOriginCreate getOrigin() {
    return origin;
  }

  public void setOrigin(TunnelOriginCreate origin) {
    this.origin = origin;
  }


  public ReqTunnelsCreate enabled(Boolean enabled) {
    this.enabled = enabled;
    return this;
  }

   /**
   * Get enabled
   * @return enabled
  **/
  @javax.annotation.Nonnull
  public Boolean getEnabled() {
    return enabled;
  }

  public void setEnabled(Boolean enabled) {
    this.enabled = enabled;
  }


  public ReqTunnelsCreate alloc(TunnelCreateUseAllocation alloc) {
    this.alloc = alloc;
    return this;
  }

   /**
   * Get alloc
   * @return alloc
  **/
  @javax.annotation.Nullable
  public TunnelCreateUseAllocation getAlloc() {
    return alloc;
  }

  public void setAlloc(TunnelCreateUseAllocation alloc) {
    this.alloc = alloc;
  }


  public ReqTunnelsCreate firewallId(String firewallId) {
    this.firewallId = firewallId;
    return this;
  }

   /**
   * Get firewallId
   * @return firewallId
  **/
  @javax.annotation.Nullable
  public String getFirewallId() {
    return firewallId;
  }

  public void setFirewallId(String firewallId) {
    this.firewallId = firewallId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ReqTunnelsCreate reqTunnelsCreate = (ReqTunnelsCreate) o;
    return Objects.equals(this.name, reqTunnelsCreate.name) &&
        Objects.equals(this.tunnelType, reqTunnelsCreate.tunnelType) &&
        Objects.equals(this.portType, reqTunnelsCreate.portType) &&
        Objects.equals(this.portCount, reqTunnelsCreate.portCount) &&
        Objects.equals(this.origin, reqTunnelsCreate.origin) &&
        Objects.equals(this.enabled, reqTunnelsCreate.enabled) &&
        Objects.equals(this.alloc, reqTunnelsCreate.alloc) &&
        Objects.equals(this.firewallId, reqTunnelsCreate.firewallId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, tunnelType, portType, portCount, origin, enabled, alloc, firewallId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ReqTunnelsCreate {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    tunnelType: ").append(toIndentedString(tunnelType)).append("\n");
    sb.append("    portType: ").append(toIndentedString(portType)).append("\n");
    sb.append("    portCount: ").append(toIndentedString(portCount)).append("\n");
    sb.append("    origin: ").append(toIndentedString(origin)).append("\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    alloc: ").append(toIndentedString(alloc)).append("\n");
    sb.append("    firewallId: ").append(toIndentedString(firewallId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("name");
    openapiFields.add("tunnel_type");
    openapiFields.add("port_type");
    openapiFields.add("port_count");
    openapiFields.add("origin");
    openapiFields.add("enabled");
    openapiFields.add("alloc");
    openapiFields.add("firewall_id");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("port_type");
    openapiRequiredFields.add("port_count");
    openapiRequiredFields.add("origin");
    openapiRequiredFields.add("enabled");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to ReqTunnelsCreate
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ReqTunnelsCreate.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ReqTunnelsCreate is not found in the empty JSON string", ReqTunnelsCreate.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ReqTunnelsCreate.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ReqTunnelsCreate` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ReqTunnelsCreate.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the optional field `tunnel_type`
      if (jsonObj.get("tunnel_type") != null && !jsonObj.get("tunnel_type").isJsonNull()) {
        TunnelType.validateJsonElement(jsonObj.get("tunnel_type"));
      }
      // validate the required field `port_type`
      PortType.validateJsonElement(jsonObj.get("port_type"));
      // validate the required field `origin`
      TunnelOriginCreate.validateJsonElement(jsonObj.get("origin"));
      // validate the optional field `alloc`
      if (jsonObj.get("alloc") != null && !jsonObj.get("alloc").isJsonNull()) {
        TunnelCreateUseAllocation.validateJsonElement(jsonObj.get("alloc"));
      }
      if ((jsonObj.get("firewall_id") != null && !jsonObj.get("firewall_id").isJsonNull()) && !jsonObj.get("firewall_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `firewall_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("firewall_id").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ReqTunnelsCreate.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ReqTunnelsCreate' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ReqTunnelsCreate> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ReqTunnelsCreate.class));

       return (TypeAdapter<T>) new TypeAdapter<ReqTunnelsCreate>() {
           @Override
           public void write(JsonWriter out, ReqTunnelsCreate value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ReqTunnelsCreate read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ReqTunnelsCreate given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ReqTunnelsCreate
  * @throws IOException if the JSON string is invalid with respect to ReqTunnelsCreate
  */
  public static ReqTunnelsCreate fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ReqTunnelsCreate.class);
  }

 /**
  * Convert an instance of ReqTunnelsCreate to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

