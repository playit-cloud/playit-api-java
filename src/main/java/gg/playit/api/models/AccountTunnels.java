/*
 * playit.gg's api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: unstable
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package gg.playit.api.models;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import gg.playit.api.models.AccountTunnel;
import gg.playit.api.models.AllocatedPorts;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import gg.playit.JSON;

/**
 * AccountTunnels
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class AccountTunnels {
  public static final String SERIALIZED_NAME_TCP_ALLOC = "tcp_alloc";
  @SerializedName(SERIALIZED_NAME_TCP_ALLOC)
  private AllocatedPorts tcpAlloc;

  public static final String SERIALIZED_NAME_UDP_ALLOC = "udp_alloc";
  @SerializedName(SERIALIZED_NAME_UDP_ALLOC)
  private AllocatedPorts udpAlloc;

  public static final String SERIALIZED_NAME_TUNNELS = "tunnels";
  @SerializedName(SERIALIZED_NAME_TUNNELS)
  private List<AccountTunnel> tunnels = new ArrayList<>();

  public AccountTunnels() {
  }

  public AccountTunnels tcpAlloc(AllocatedPorts tcpAlloc) {
    this.tcpAlloc = tcpAlloc;
    return this;
  }

   /**
   * Get tcpAlloc
   * @return tcpAlloc
  **/
  @javax.annotation.Nonnull
  public AllocatedPorts getTcpAlloc() {
    return tcpAlloc;
  }

  public void setTcpAlloc(AllocatedPorts tcpAlloc) {
    this.tcpAlloc = tcpAlloc;
  }


  public AccountTunnels udpAlloc(AllocatedPorts udpAlloc) {
    this.udpAlloc = udpAlloc;
    return this;
  }

   /**
   * Get udpAlloc
   * @return udpAlloc
  **/
  @javax.annotation.Nonnull
  public AllocatedPorts getUdpAlloc() {
    return udpAlloc;
  }

  public void setUdpAlloc(AllocatedPorts udpAlloc) {
    this.udpAlloc = udpAlloc;
  }


  public AccountTunnels tunnels(List<AccountTunnel> tunnels) {
    this.tunnels = tunnels;
    return this;
  }

  public AccountTunnels addTunnelsItem(AccountTunnel tunnelsItem) {
    if (this.tunnels == null) {
      this.tunnels = new ArrayList<>();
    }
    this.tunnels.add(tunnelsItem);
    return this;
  }

   /**
   * Get tunnels
   * @return tunnels
  **/
  @javax.annotation.Nonnull
  public List<AccountTunnel> getTunnels() {
    return tunnels;
  }

  public void setTunnels(List<AccountTunnel> tunnels) {
    this.tunnels = tunnels;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AccountTunnels accountTunnels = (AccountTunnels) o;
    return Objects.equals(this.tcpAlloc, accountTunnels.tcpAlloc) &&
        Objects.equals(this.udpAlloc, accountTunnels.udpAlloc) &&
        Objects.equals(this.tunnels, accountTunnels.tunnels);
  }

  @Override
  public int hashCode() {
    return Objects.hash(tcpAlloc, udpAlloc, tunnels);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AccountTunnels {\n");
    sb.append("    tcpAlloc: ").append(toIndentedString(tcpAlloc)).append("\n");
    sb.append("    udpAlloc: ").append(toIndentedString(udpAlloc)).append("\n");
    sb.append("    tunnels: ").append(toIndentedString(tunnels)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("tcp_alloc");
    openapiFields.add("udp_alloc");
    openapiFields.add("tunnels");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("tcp_alloc");
    openapiRequiredFields.add("udp_alloc");
    openapiRequiredFields.add("tunnels");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to AccountTunnels
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AccountTunnels.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AccountTunnels is not found in the empty JSON string", AccountTunnels.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AccountTunnels.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AccountTunnels` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AccountTunnels.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `tcp_alloc`
      AllocatedPorts.validateJsonElement(jsonObj.get("tcp_alloc"));
      // validate the required field `udp_alloc`
      AllocatedPorts.validateJsonElement(jsonObj.get("udp_alloc"));
      // ensure the json data is an array
      if (!jsonObj.get("tunnels").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `tunnels` to be an array in the JSON string but got `%s`", jsonObj.get("tunnels").toString()));
      }

      JsonArray jsonArraytunnels = jsonObj.getAsJsonArray("tunnels");
      // validate the required field `tunnels` (array)
      for (int i = 0; i < jsonArraytunnels.size(); i++) {
        AccountTunnel.validateJsonElement(jsonArraytunnels.get(i));
      };
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AccountTunnels.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AccountTunnels' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AccountTunnels> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AccountTunnels.class));

       return (TypeAdapter<T>) new TypeAdapter<AccountTunnels>() {
           @Override
           public void write(JsonWriter out, AccountTunnels value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AccountTunnels read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of AccountTunnels given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of AccountTunnels
  * @throws IOException if the JSON string is invalid with respect to AccountTunnels
  */
  public static AccountTunnels fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AccountTunnels.class);
  }

 /**
  * Convert an instance of AccountTunnels to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

