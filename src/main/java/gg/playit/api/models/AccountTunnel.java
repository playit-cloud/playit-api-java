/*
 * playit.gg's api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: unstable
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package gg.playit.api.models;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import gg.playit.api.models.AccountTunnelAllocation;
import gg.playit.api.models.AllocationRegion;
import gg.playit.api.models.PortType;
import gg.playit.api.models.Ratelimit;
import gg.playit.api.models.TunnelDisabledReason;
import gg.playit.api.models.TunnelDomain;
import gg.playit.api.models.TunnelExpireNotice;
import gg.playit.api.models.TunnelOrigin;
import gg.playit.api.models.TunnelType;
import java.io.IOException;
import java.math.BigDecimal;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import gg.playit.JSON;

/**
 * AccountTunnel
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class AccountTunnel {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_TUNNEL_TYPE = "tunnel_type";
  @SerializedName(SERIALIZED_NAME_TUNNEL_TYPE)
  private TunnelType tunnelType;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PORT_TYPE = "port_type";
  @SerializedName(SERIALIZED_NAME_PORT_TYPE)
  private PortType portType;

  public static final String SERIALIZED_NAME_PORT_COUNT = "port_count";
  @SerializedName(SERIALIZED_NAME_PORT_COUNT)
  private BigDecimal portCount;

  public static final String SERIALIZED_NAME_ALLOC = "alloc";
  @SerializedName(SERIALIZED_NAME_ALLOC)
  private AccountTunnelAllocation alloc;

  public static final String SERIALIZED_NAME_ORIGIN = "origin";
  @SerializedName(SERIALIZED_NAME_ORIGIN)
  private TunnelOrigin origin;

  public static final String SERIALIZED_NAME_DOMAIN = "domain";
  @SerializedName(SERIALIZED_NAME_DOMAIN)
  private TunnelDomain domain;

  public static final String SERIALIZED_NAME_FIREWALL_ID = "firewall_id";
  @SerializedName(SERIALIZED_NAME_FIREWALL_ID)
  private String firewallId;

  public static final String SERIALIZED_NAME_RATELIMIT = "ratelimit";
  @SerializedName(SERIALIZED_NAME_RATELIMIT)
  private Ratelimit ratelimit;

  public static final String SERIALIZED_NAME_ACTIVE = "active";
  @SerializedName(SERIALIZED_NAME_ACTIVE)
  private Boolean active;

  public static final String SERIALIZED_NAME_DISABLED_REASON = "disabled_reason";
  @SerializedName(SERIALIZED_NAME_DISABLED_REASON)
  private TunnelDisabledReason disabledReason;

  public static final String SERIALIZED_NAME_REGION = "region";
  @SerializedName(SERIALIZED_NAME_REGION)
  private AllocationRegion region;

  public static final String SERIALIZED_NAME_EXPIRE_NOTICE = "expire_notice";
  @SerializedName(SERIALIZED_NAME_EXPIRE_NOTICE)
  private TunnelExpireNotice expireNotice;

  public AccountTunnel() {
  }

  public AccountTunnel id(String id) {
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public AccountTunnel tunnelType(TunnelType tunnelType) {
    this.tunnelType = tunnelType;
    return this;
  }

   /**
   * Get tunnelType
   * @return tunnelType
  **/
  @javax.annotation.Nullable
  public TunnelType getTunnelType() {
    return tunnelType;
  }

  public void setTunnelType(TunnelType tunnelType) {
    this.tunnelType = tunnelType;
  }


  public AccountTunnel createdAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

   /**
   * Get createdAt
   * @return createdAt
  **/
  @javax.annotation.Nonnull
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public AccountTunnel name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public AccountTunnel portType(PortType portType) {
    this.portType = portType;
    return this;
  }

   /**
   * Get portType
   * @return portType
  **/
  @javax.annotation.Nonnull
  public PortType getPortType() {
    return portType;
  }

  public void setPortType(PortType portType) {
    this.portType = portType;
  }


  public AccountTunnel portCount(BigDecimal portCount) {
    this.portCount = portCount;
    return this;
  }

   /**
   * Get portCount
   * @return portCount
  **/
  @javax.annotation.Nonnull
  public BigDecimal getPortCount() {
    return portCount;
  }

  public void setPortCount(BigDecimal portCount) {
    this.portCount = portCount;
  }


  public AccountTunnel alloc(AccountTunnelAllocation alloc) {
    this.alloc = alloc;
    return this;
  }

   /**
   * Get alloc
   * @return alloc
  **/
  @javax.annotation.Nonnull
  public AccountTunnelAllocation getAlloc() {
    return alloc;
  }

  public void setAlloc(AccountTunnelAllocation alloc) {
    this.alloc = alloc;
  }


  public AccountTunnel origin(TunnelOrigin origin) {
    this.origin = origin;
    return this;
  }

   /**
   * Get origin
   * @return origin
  **/
  @javax.annotation.Nonnull
  public TunnelOrigin getOrigin() {
    return origin;
  }

  public void setOrigin(TunnelOrigin origin) {
    this.origin = origin;
  }


  public AccountTunnel domain(TunnelDomain domain) {
    this.domain = domain;
    return this;
  }

   /**
   * Get domain
   * @return domain
  **/
  @javax.annotation.Nullable
  public TunnelDomain getDomain() {
    return domain;
  }

  public void setDomain(TunnelDomain domain) {
    this.domain = domain;
  }


  public AccountTunnel firewallId(String firewallId) {
    this.firewallId = firewallId;
    return this;
  }

   /**
   * Get firewallId
   * @return firewallId
  **/
  @javax.annotation.Nullable
  public String getFirewallId() {
    return firewallId;
  }

  public void setFirewallId(String firewallId) {
    this.firewallId = firewallId;
  }


  public AccountTunnel ratelimit(Ratelimit ratelimit) {
    this.ratelimit = ratelimit;
    return this;
  }

   /**
   * Get ratelimit
   * @return ratelimit
  **/
  @javax.annotation.Nonnull
  public Ratelimit getRatelimit() {
    return ratelimit;
  }

  public void setRatelimit(Ratelimit ratelimit) {
    this.ratelimit = ratelimit;
  }


  public AccountTunnel active(Boolean active) {
    this.active = active;
    return this;
  }

   /**
   * Get active
   * @return active
  **/
  @javax.annotation.Nonnull
  public Boolean getActive() {
    return active;
  }

  public void setActive(Boolean active) {
    this.active = active;
  }


  public AccountTunnel disabledReason(TunnelDisabledReason disabledReason) {
    this.disabledReason = disabledReason;
    return this;
  }

   /**
   * Get disabledReason
   * @return disabledReason
  **/
  @javax.annotation.Nullable
  public TunnelDisabledReason getDisabledReason() {
    return disabledReason;
  }

  public void setDisabledReason(TunnelDisabledReason disabledReason) {
    this.disabledReason = disabledReason;
  }


  public AccountTunnel region(AllocationRegion region) {
    this.region = region;
    return this;
  }

   /**
   * Get region
   * @return region
  **/
  @javax.annotation.Nullable
  public AllocationRegion getRegion() {
    return region;
  }

  public void setRegion(AllocationRegion region) {
    this.region = region;
  }


  public AccountTunnel expireNotice(TunnelExpireNotice expireNotice) {
    this.expireNotice = expireNotice;
    return this;
  }

   /**
   * Get expireNotice
   * @return expireNotice
  **/
  @javax.annotation.Nullable
  public TunnelExpireNotice getExpireNotice() {
    return expireNotice;
  }

  public void setExpireNotice(TunnelExpireNotice expireNotice) {
    this.expireNotice = expireNotice;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AccountTunnel accountTunnel = (AccountTunnel) o;
    return Objects.equals(this.id, accountTunnel.id) &&
        Objects.equals(this.tunnelType, accountTunnel.tunnelType) &&
        Objects.equals(this.createdAt, accountTunnel.createdAt) &&
        Objects.equals(this.name, accountTunnel.name) &&
        Objects.equals(this.portType, accountTunnel.portType) &&
        Objects.equals(this.portCount, accountTunnel.portCount) &&
        Objects.equals(this.alloc, accountTunnel.alloc) &&
        Objects.equals(this.origin, accountTunnel.origin) &&
        Objects.equals(this.domain, accountTunnel.domain) &&
        Objects.equals(this.firewallId, accountTunnel.firewallId) &&
        Objects.equals(this.ratelimit, accountTunnel.ratelimit) &&
        Objects.equals(this.active, accountTunnel.active) &&
        Objects.equals(this.disabledReason, accountTunnel.disabledReason) &&
        Objects.equals(this.region, accountTunnel.region) &&
        Objects.equals(this.expireNotice, accountTunnel.expireNotice);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, tunnelType, createdAt, name, portType, portCount, alloc, origin, domain, firewallId, ratelimit, active, disabledReason, region, expireNotice);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AccountTunnel {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    tunnelType: ").append(toIndentedString(tunnelType)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    portType: ").append(toIndentedString(portType)).append("\n");
    sb.append("    portCount: ").append(toIndentedString(portCount)).append("\n");
    sb.append("    alloc: ").append(toIndentedString(alloc)).append("\n");
    sb.append("    origin: ").append(toIndentedString(origin)).append("\n");
    sb.append("    domain: ").append(toIndentedString(domain)).append("\n");
    sb.append("    firewallId: ").append(toIndentedString(firewallId)).append("\n");
    sb.append("    ratelimit: ").append(toIndentedString(ratelimit)).append("\n");
    sb.append("    active: ").append(toIndentedString(active)).append("\n");
    sb.append("    disabledReason: ").append(toIndentedString(disabledReason)).append("\n");
    sb.append("    region: ").append(toIndentedString(region)).append("\n");
    sb.append("    expireNotice: ").append(toIndentedString(expireNotice)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("tunnel_type");
    openapiFields.add("created_at");
    openapiFields.add("name");
    openapiFields.add("port_type");
    openapiFields.add("port_count");
    openapiFields.add("alloc");
    openapiFields.add("origin");
    openapiFields.add("domain");
    openapiFields.add("firewall_id");
    openapiFields.add("ratelimit");
    openapiFields.add("active");
    openapiFields.add("disabled_reason");
    openapiFields.add("region");
    openapiFields.add("expire_notice");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("created_at");
    openapiRequiredFields.add("port_type");
    openapiRequiredFields.add("port_count");
    openapiRequiredFields.add("alloc");
    openapiRequiredFields.add("origin");
    openapiRequiredFields.add("ratelimit");
    openapiRequiredFields.add("active");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to AccountTunnel
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AccountTunnel.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AccountTunnel is not found in the empty JSON string", AccountTunnel.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AccountTunnel.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AccountTunnel` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AccountTunnel.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      // validate the optional field `tunnel_type`
      if (jsonObj.get("tunnel_type") != null && !jsonObj.get("tunnel_type").isJsonNull()) {
        TunnelType.validateJsonElement(jsonObj.get("tunnel_type"));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the required field `port_type`
      PortType.validateJsonElement(jsonObj.get("port_type"));
      // validate the required field `alloc`
      AccountTunnelAllocation.validateJsonElement(jsonObj.get("alloc"));
      // validate the required field `origin`
      TunnelOrigin.validateJsonElement(jsonObj.get("origin"));
      // validate the optional field `domain`
      if (jsonObj.get("domain") != null && !jsonObj.get("domain").isJsonNull()) {
        TunnelDomain.validateJsonElement(jsonObj.get("domain"));
      }
      if ((jsonObj.get("firewall_id") != null && !jsonObj.get("firewall_id").isJsonNull()) && !jsonObj.get("firewall_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `firewall_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("firewall_id").toString()));
      }
      // validate the required field `ratelimit`
      Ratelimit.validateJsonElement(jsonObj.get("ratelimit"));
      // validate the optional field `disabled_reason`
      if (jsonObj.get("disabled_reason") != null && !jsonObj.get("disabled_reason").isJsonNull()) {
        TunnelDisabledReason.validateJsonElement(jsonObj.get("disabled_reason"));
      }
      // validate the optional field `region`
      if (jsonObj.get("region") != null && !jsonObj.get("region").isJsonNull()) {
        AllocationRegion.validateJsonElement(jsonObj.get("region"));
      }
      // validate the optional field `expire_notice`
      if (jsonObj.get("expire_notice") != null && !jsonObj.get("expire_notice").isJsonNull()) {
        TunnelExpireNotice.validateJsonElement(jsonObj.get("expire_notice"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AccountTunnel.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AccountTunnel' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AccountTunnel> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AccountTunnel.class));

       return (TypeAdapter<T>) new TypeAdapter<AccountTunnel>() {
           @Override
           public void write(JsonWriter out, AccountTunnel value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AccountTunnel read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of AccountTunnel given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of AccountTunnel
  * @throws IOException if the JSON string is invalid with respect to AccountTunnel
  */
  public static AccountTunnel fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AccountTunnel.class);
  }

 /**
  * Convert an instance of AccountTunnel to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

