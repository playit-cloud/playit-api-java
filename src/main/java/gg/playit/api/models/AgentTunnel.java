/*
 * playit.gg's api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: unstable
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package gg.playit.api.models;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import gg.playit.api.models.AgentTunnelDisabled;
import gg.playit.api.models.PortRange;
import gg.playit.api.models.PortType;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import gg.playit.JSON;

/**
 * AgentTunnel
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class AgentTunnel {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_IP_NUM = "ip_num";
  @SerializedName(SERIALIZED_NAME_IP_NUM)
  private BigDecimal ipNum;

  public static final String SERIALIZED_NAME_REGION_NUM = "region_num";
  @SerializedName(SERIALIZED_NAME_REGION_NUM)
  private BigDecimal regionNum;

  public static final String SERIALIZED_NAME_PORT = "port";
  @SerializedName(SERIALIZED_NAME_PORT)
  private PortRange port;

  public static final String SERIALIZED_NAME_PROTO = "proto";
  @SerializedName(SERIALIZED_NAME_PROTO)
  private PortType proto;

  public static final String SERIALIZED_NAME_LOCAL_IP = "local_ip";
  @SerializedName(SERIALIZED_NAME_LOCAL_IP)
  private String localIp;

  public static final String SERIALIZED_NAME_LOCAL_PORT = "local_port";
  @SerializedName(SERIALIZED_NAME_LOCAL_PORT)
  private BigDecimal localPort;

  public static final String SERIALIZED_NAME_TUNNEL_TYPE = "tunnel_type";
  @SerializedName(SERIALIZED_NAME_TUNNEL_TYPE)
  private String tunnelType;

  public static final String SERIALIZED_NAME_ASSIGNED_DOMAIN = "assigned_domain";
  @SerializedName(SERIALIZED_NAME_ASSIGNED_DOMAIN)
  private String assignedDomain;

  public static final String SERIALIZED_NAME_CUSTOM_DOMAIN = "custom_domain";
  @SerializedName(SERIALIZED_NAME_CUSTOM_DOMAIN)
  private String customDomain;

  public static final String SERIALIZED_NAME_DISABLED = "disabled";
  @SerializedName(SERIALIZED_NAME_DISABLED)
  private AgentTunnelDisabled disabled;

  public AgentTunnel() {
  }

  public AgentTunnel id(String id) {
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public AgentTunnel name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public AgentTunnel ipNum(BigDecimal ipNum) {
    this.ipNum = ipNum;
    return this;
  }

   /**
   * Get ipNum
   * @return ipNum
  **/
  @javax.annotation.Nonnull
  public BigDecimal getIpNum() {
    return ipNum;
  }

  public void setIpNum(BigDecimal ipNum) {
    this.ipNum = ipNum;
  }


  public AgentTunnel regionNum(BigDecimal regionNum) {
    this.regionNum = regionNum;
    return this;
  }

   /**
   * Get regionNum
   * @return regionNum
  **/
  @javax.annotation.Nonnull
  public BigDecimal getRegionNum() {
    return regionNum;
  }

  public void setRegionNum(BigDecimal regionNum) {
    this.regionNum = regionNum;
  }


  public AgentTunnel port(PortRange port) {
    this.port = port;
    return this;
  }

   /**
   * Get port
   * @return port
  **/
  @javax.annotation.Nonnull
  public PortRange getPort() {
    return port;
  }

  public void setPort(PortRange port) {
    this.port = port;
  }


  public AgentTunnel proto(PortType proto) {
    this.proto = proto;
    return this;
  }

   /**
   * Get proto
   * @return proto
  **/
  @javax.annotation.Nonnull
  public PortType getProto() {
    return proto;
  }

  public void setProto(PortType proto) {
    this.proto = proto;
  }


  public AgentTunnel localIp(String localIp) {
    this.localIp = localIp;
    return this;
  }

   /**
   * Get localIp
   * @return localIp
  **/
  @javax.annotation.Nonnull
  public String getLocalIp() {
    return localIp;
  }

  public void setLocalIp(String localIp) {
    this.localIp = localIp;
  }


  public AgentTunnel localPort(BigDecimal localPort) {
    this.localPort = localPort;
    return this;
  }

   /**
   * Get localPort
   * @return localPort
  **/
  @javax.annotation.Nonnull
  public BigDecimal getLocalPort() {
    return localPort;
  }

  public void setLocalPort(BigDecimal localPort) {
    this.localPort = localPort;
  }


  public AgentTunnel tunnelType(String tunnelType) {
    this.tunnelType = tunnelType;
    return this;
  }

   /**
   * Get tunnelType
   * @return tunnelType
  **/
  @javax.annotation.Nullable
  public String getTunnelType() {
    return tunnelType;
  }

  public void setTunnelType(String tunnelType) {
    this.tunnelType = tunnelType;
  }


  public AgentTunnel assignedDomain(String assignedDomain) {
    this.assignedDomain = assignedDomain;
    return this;
  }

   /**
   * Get assignedDomain
   * @return assignedDomain
  **/
  @javax.annotation.Nonnull
  public String getAssignedDomain() {
    return assignedDomain;
  }

  public void setAssignedDomain(String assignedDomain) {
    this.assignedDomain = assignedDomain;
  }


  public AgentTunnel customDomain(String customDomain) {
    this.customDomain = customDomain;
    return this;
  }

   /**
   * Get customDomain
   * @return customDomain
  **/
  @javax.annotation.Nullable
  public String getCustomDomain() {
    return customDomain;
  }

  public void setCustomDomain(String customDomain) {
    this.customDomain = customDomain;
  }


  public AgentTunnel disabled(AgentTunnelDisabled disabled) {
    this.disabled = disabled;
    return this;
  }

   /**
   * Get disabled
   * @return disabled
  **/
  @javax.annotation.Nullable
  public AgentTunnelDisabled getDisabled() {
    return disabled;
  }

  public void setDisabled(AgentTunnelDisabled disabled) {
    this.disabled = disabled;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AgentTunnel agentTunnel = (AgentTunnel) o;
    return Objects.equals(this.id, agentTunnel.id) &&
        Objects.equals(this.name, agentTunnel.name) &&
        Objects.equals(this.ipNum, agentTunnel.ipNum) &&
        Objects.equals(this.regionNum, agentTunnel.regionNum) &&
        Objects.equals(this.port, agentTunnel.port) &&
        Objects.equals(this.proto, agentTunnel.proto) &&
        Objects.equals(this.localIp, agentTunnel.localIp) &&
        Objects.equals(this.localPort, agentTunnel.localPort) &&
        Objects.equals(this.tunnelType, agentTunnel.tunnelType) &&
        Objects.equals(this.assignedDomain, agentTunnel.assignedDomain) &&
        Objects.equals(this.customDomain, agentTunnel.customDomain) &&
        Objects.equals(this.disabled, agentTunnel.disabled);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, name, ipNum, regionNum, port, proto, localIp, localPort, tunnelType, assignedDomain, customDomain, disabled);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AgentTunnel {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    ipNum: ").append(toIndentedString(ipNum)).append("\n");
    sb.append("    regionNum: ").append(toIndentedString(regionNum)).append("\n");
    sb.append("    port: ").append(toIndentedString(port)).append("\n");
    sb.append("    proto: ").append(toIndentedString(proto)).append("\n");
    sb.append("    localIp: ").append(toIndentedString(localIp)).append("\n");
    sb.append("    localPort: ").append(toIndentedString(localPort)).append("\n");
    sb.append("    tunnelType: ").append(toIndentedString(tunnelType)).append("\n");
    sb.append("    assignedDomain: ").append(toIndentedString(assignedDomain)).append("\n");
    sb.append("    customDomain: ").append(toIndentedString(customDomain)).append("\n");
    sb.append("    disabled: ").append(toIndentedString(disabled)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("name");
    openapiFields.add("ip_num");
    openapiFields.add("region_num");
    openapiFields.add("port");
    openapiFields.add("proto");
    openapiFields.add("local_ip");
    openapiFields.add("local_port");
    openapiFields.add("tunnel_type");
    openapiFields.add("assigned_domain");
    openapiFields.add("custom_domain");
    openapiFields.add("disabled");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("ip_num");
    openapiRequiredFields.add("region_num");
    openapiRequiredFields.add("port");
    openapiRequiredFields.add("proto");
    openapiRequiredFields.add("local_ip");
    openapiRequiredFields.add("local_port");
    openapiRequiredFields.add("assigned_domain");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to AgentTunnel
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AgentTunnel.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AgentTunnel is not found in the empty JSON string", AgentTunnel.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AgentTunnel.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AgentTunnel` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AgentTunnel.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the required field `port`
      PortRange.validateJsonElement(jsonObj.get("port"));
      // validate the required field `proto`
      PortType.validateJsonElement(jsonObj.get("proto"));
      if (!jsonObj.get("local_ip").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `local_ip` to be a primitive type in the JSON string but got `%s`", jsonObj.get("local_ip").toString()));
      }
      if ((jsonObj.get("tunnel_type") != null && !jsonObj.get("tunnel_type").isJsonNull()) && !jsonObj.get("tunnel_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tunnel_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tunnel_type").toString()));
      }
      if (!jsonObj.get("assigned_domain").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `assigned_domain` to be a primitive type in the JSON string but got `%s`", jsonObj.get("assigned_domain").toString()));
      }
      if ((jsonObj.get("custom_domain") != null && !jsonObj.get("custom_domain").isJsonNull()) && !jsonObj.get("custom_domain").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `custom_domain` to be a primitive type in the JSON string but got `%s`", jsonObj.get("custom_domain").toString()));
      }
      // validate the optional field `disabled`
      if (jsonObj.get("disabled") != null && !jsonObj.get("disabled").isJsonNull()) {
        AgentTunnelDisabled.validateJsonElement(jsonObj.get("disabled"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AgentTunnel.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AgentTunnel' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AgentTunnel> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AgentTunnel.class));

       return (TypeAdapter<T>) new TypeAdapter<AgentTunnel>() {
           @Override
           public void write(JsonWriter out, AgentTunnel value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AgentTunnel read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of AgentTunnel given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of AgentTunnel
  * @throws IOException if the JSON string is invalid with respect to AgentTunnel
  */
  public static AgentTunnel fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AgentTunnel.class);
  }

 /**
  * Convert an instance of AgentTunnel to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

