/*
 * playit.gg's api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: unstable
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package gg.playit.api.models;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import gg.playit.api.models.AllocationRegion;
import gg.playit.api.models.IpType;
import gg.playit.api.models.TunnelAssignment;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import gg.playit.JSON;

/**
 * TunnelAllocated
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class TunnelAllocated {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_IP_HOSTNAME = "ip_hostname";
  @SerializedName(SERIALIZED_NAME_IP_HOSTNAME)
  private String ipHostname;

  public static final String SERIALIZED_NAME_STATIC_IP4 = "static_ip4";
  @SerializedName(SERIALIZED_NAME_STATIC_IP4)
  private String staticIp4;

  public static final String SERIALIZED_NAME_ASSIGNED_DOMAIN = "assigned_domain";
  @SerializedName(SERIALIZED_NAME_ASSIGNED_DOMAIN)
  private String assignedDomain;

  public static final String SERIALIZED_NAME_ASSIGNED_SRV = "assigned_srv";
  @SerializedName(SERIALIZED_NAME_ASSIGNED_SRV)
  private String assignedSrv;

  public static final String SERIALIZED_NAME_TUNNEL_IP = "tunnel_ip";
  @SerializedName(SERIALIZED_NAME_TUNNEL_IP)
  private String tunnelIp;

  public static final String SERIALIZED_NAME_PORT_START = "port_start";
  @SerializedName(SERIALIZED_NAME_PORT_START)
  private BigDecimal portStart;

  public static final String SERIALIZED_NAME_PORT_END = "port_end";
  @SerializedName(SERIALIZED_NAME_PORT_END)
  private BigDecimal portEnd;

  public static final String SERIALIZED_NAME_ASSIGNMENT = "assignment";
  @SerializedName(SERIALIZED_NAME_ASSIGNMENT)
  private TunnelAssignment assignment;

  public static final String SERIALIZED_NAME_IP_TYPE = "ip_type";
  @SerializedName(SERIALIZED_NAME_IP_TYPE)
  private IpType ipType;

  public static final String SERIALIZED_NAME_REGION = "region";
  @SerializedName(SERIALIZED_NAME_REGION)
  private AllocationRegion region;

  public TunnelAllocated() {
  }

  public TunnelAllocated id(String id) {
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public TunnelAllocated ipHostname(String ipHostname) {
    this.ipHostname = ipHostname;
    return this;
  }

   /**
   * Get ipHostname
   * @return ipHostname
  **/
  @javax.annotation.Nonnull
  public String getIpHostname() {
    return ipHostname;
  }

  public void setIpHostname(String ipHostname) {
    this.ipHostname = ipHostname;
  }


  public TunnelAllocated staticIp4(String staticIp4) {
    this.staticIp4 = staticIp4;
    return this;
  }

   /**
   * Get staticIp4
   * @return staticIp4
  **/
  @javax.annotation.Nullable
  public String getStaticIp4() {
    return staticIp4;
  }

  public void setStaticIp4(String staticIp4) {
    this.staticIp4 = staticIp4;
  }


  public TunnelAllocated assignedDomain(String assignedDomain) {
    this.assignedDomain = assignedDomain;
    return this;
  }

   /**
   * Get assignedDomain
   * @return assignedDomain
  **/
  @javax.annotation.Nonnull
  public String getAssignedDomain() {
    return assignedDomain;
  }

  public void setAssignedDomain(String assignedDomain) {
    this.assignedDomain = assignedDomain;
  }


  public TunnelAllocated assignedSrv(String assignedSrv) {
    this.assignedSrv = assignedSrv;
    return this;
  }

   /**
   * Get assignedSrv
   * @return assignedSrv
  **/
  @javax.annotation.Nullable
  public String getAssignedSrv() {
    return assignedSrv;
  }

  public void setAssignedSrv(String assignedSrv) {
    this.assignedSrv = assignedSrv;
  }


  public TunnelAllocated tunnelIp(String tunnelIp) {
    this.tunnelIp = tunnelIp;
    return this;
  }

   /**
   * Get tunnelIp
   * @return tunnelIp
  **/
  @javax.annotation.Nonnull
  public String getTunnelIp() {
    return tunnelIp;
  }

  public void setTunnelIp(String tunnelIp) {
    this.tunnelIp = tunnelIp;
  }


  public TunnelAllocated portStart(BigDecimal portStart) {
    this.portStart = portStart;
    return this;
  }

   /**
   * Get portStart
   * @return portStart
  **/
  @javax.annotation.Nonnull
  public BigDecimal getPortStart() {
    return portStart;
  }

  public void setPortStart(BigDecimal portStart) {
    this.portStart = portStart;
  }


  public TunnelAllocated portEnd(BigDecimal portEnd) {
    this.portEnd = portEnd;
    return this;
  }

   /**
   * Get portEnd
   * @return portEnd
  **/
  @javax.annotation.Nonnull
  public BigDecimal getPortEnd() {
    return portEnd;
  }

  public void setPortEnd(BigDecimal portEnd) {
    this.portEnd = portEnd;
  }


  public TunnelAllocated assignment(TunnelAssignment assignment) {
    this.assignment = assignment;
    return this;
  }

   /**
   * Get assignment
   * @return assignment
  **/
  @javax.annotation.Nonnull
  public TunnelAssignment getAssignment() {
    return assignment;
  }

  public void setAssignment(TunnelAssignment assignment) {
    this.assignment = assignment;
  }


  public TunnelAllocated ipType(IpType ipType) {
    this.ipType = ipType;
    return this;
  }

   /**
   * Get ipType
   * @return ipType
  **/
  @javax.annotation.Nonnull
  public IpType getIpType() {
    return ipType;
  }

  public void setIpType(IpType ipType) {
    this.ipType = ipType;
  }


  public TunnelAllocated region(AllocationRegion region) {
    this.region = region;
    return this;
  }

   /**
   * Get region
   * @return region
  **/
  @javax.annotation.Nonnull
  public AllocationRegion getRegion() {
    return region;
  }

  public void setRegion(AllocationRegion region) {
    this.region = region;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TunnelAllocated tunnelAllocated = (TunnelAllocated) o;
    return Objects.equals(this.id, tunnelAllocated.id) &&
        Objects.equals(this.ipHostname, tunnelAllocated.ipHostname) &&
        Objects.equals(this.staticIp4, tunnelAllocated.staticIp4) &&
        Objects.equals(this.assignedDomain, tunnelAllocated.assignedDomain) &&
        Objects.equals(this.assignedSrv, tunnelAllocated.assignedSrv) &&
        Objects.equals(this.tunnelIp, tunnelAllocated.tunnelIp) &&
        Objects.equals(this.portStart, tunnelAllocated.portStart) &&
        Objects.equals(this.portEnd, tunnelAllocated.portEnd) &&
        Objects.equals(this.assignment, tunnelAllocated.assignment) &&
        Objects.equals(this.ipType, tunnelAllocated.ipType) &&
        Objects.equals(this.region, tunnelAllocated.region);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, ipHostname, staticIp4, assignedDomain, assignedSrv, tunnelIp, portStart, portEnd, assignment, ipType, region);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TunnelAllocated {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    ipHostname: ").append(toIndentedString(ipHostname)).append("\n");
    sb.append("    staticIp4: ").append(toIndentedString(staticIp4)).append("\n");
    sb.append("    assignedDomain: ").append(toIndentedString(assignedDomain)).append("\n");
    sb.append("    assignedSrv: ").append(toIndentedString(assignedSrv)).append("\n");
    sb.append("    tunnelIp: ").append(toIndentedString(tunnelIp)).append("\n");
    sb.append("    portStart: ").append(toIndentedString(portStart)).append("\n");
    sb.append("    portEnd: ").append(toIndentedString(portEnd)).append("\n");
    sb.append("    assignment: ").append(toIndentedString(assignment)).append("\n");
    sb.append("    ipType: ").append(toIndentedString(ipType)).append("\n");
    sb.append("    region: ").append(toIndentedString(region)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("ip_hostname");
    openapiFields.add("static_ip4");
    openapiFields.add("assigned_domain");
    openapiFields.add("assigned_srv");
    openapiFields.add("tunnel_ip");
    openapiFields.add("port_start");
    openapiFields.add("port_end");
    openapiFields.add("assignment");
    openapiFields.add("ip_type");
    openapiFields.add("region");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("ip_hostname");
    openapiRequiredFields.add("assigned_domain");
    openapiRequiredFields.add("tunnel_ip");
    openapiRequiredFields.add("port_start");
    openapiRequiredFields.add("port_end");
    openapiRequiredFields.add("assignment");
    openapiRequiredFields.add("ip_type");
    openapiRequiredFields.add("region");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to TunnelAllocated
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TunnelAllocated.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TunnelAllocated is not found in the empty JSON string", TunnelAllocated.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TunnelAllocated.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TunnelAllocated` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : TunnelAllocated.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("ip_hostname").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ip_hostname` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ip_hostname").toString()));
      }
      if ((jsonObj.get("static_ip4") != null && !jsonObj.get("static_ip4").isJsonNull()) && !jsonObj.get("static_ip4").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `static_ip4` to be a primitive type in the JSON string but got `%s`", jsonObj.get("static_ip4").toString()));
      }
      if (!jsonObj.get("assigned_domain").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `assigned_domain` to be a primitive type in the JSON string but got `%s`", jsonObj.get("assigned_domain").toString()));
      }
      if ((jsonObj.get("assigned_srv") != null && !jsonObj.get("assigned_srv").isJsonNull()) && !jsonObj.get("assigned_srv").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `assigned_srv` to be a primitive type in the JSON string but got `%s`", jsonObj.get("assigned_srv").toString()));
      }
      if (!jsonObj.get("tunnel_ip").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tunnel_ip` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tunnel_ip").toString()));
      }
      // validate the required field `assignment`
      TunnelAssignment.validateJsonElement(jsonObj.get("assignment"));
      // validate the required field `ip_type`
      IpType.validateJsonElement(jsonObj.get("ip_type"));
      // validate the required field `region`
      AllocationRegion.validateJsonElement(jsonObj.get("region"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TunnelAllocated.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TunnelAllocated' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TunnelAllocated> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TunnelAllocated.class));

       return (TypeAdapter<T>) new TypeAdapter<TunnelAllocated>() {
           @Override
           public void write(JsonWriter out, TunnelAllocated value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TunnelAllocated read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of TunnelAllocated given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of TunnelAllocated
  * @throws IOException if the JSON string is invalid with respect to TunnelAllocated
  */
  public static TunnelAllocated fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TunnelAllocated.class);
  }

 /**
  * Convert an instance of TunnelAllocated to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

