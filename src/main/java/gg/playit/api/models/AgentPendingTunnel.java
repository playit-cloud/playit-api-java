/*
 * playit.gg's api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: unstable
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package gg.playit.api.models;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import gg.playit.api.models.PortType;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import gg.playit.JSON;

/**
 * AgentPendingTunnel
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class AgentPendingTunnel {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PROTO = "proto";
  @SerializedName(SERIALIZED_NAME_PROTO)
  private PortType proto;

  public static final String SERIALIZED_NAME_PORT_COUNT = "port_count";
  @SerializedName(SERIALIZED_NAME_PORT_COUNT)
  private BigDecimal portCount;

  public static final String SERIALIZED_NAME_TUNNEL_TYPE = "tunnel_type";
  @SerializedName(SERIALIZED_NAME_TUNNEL_TYPE)
  private String tunnelType;

  public static final String SERIALIZED_NAME_IS_DISABLED = "is_disabled";
  @SerializedName(SERIALIZED_NAME_IS_DISABLED)
  private Boolean isDisabled;

  public AgentPendingTunnel() {
  }

  public AgentPendingTunnel id(String id) {
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public AgentPendingTunnel name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public AgentPendingTunnel proto(PortType proto) {
    this.proto = proto;
    return this;
  }

   /**
   * Get proto
   * @return proto
  **/
  @javax.annotation.Nonnull
  public PortType getProto() {
    return proto;
  }

  public void setProto(PortType proto) {
    this.proto = proto;
  }


  public AgentPendingTunnel portCount(BigDecimal portCount) {
    this.portCount = portCount;
    return this;
  }

   /**
   * Get portCount
   * @return portCount
  **/
  @javax.annotation.Nonnull
  public BigDecimal getPortCount() {
    return portCount;
  }

  public void setPortCount(BigDecimal portCount) {
    this.portCount = portCount;
  }


  public AgentPendingTunnel tunnelType(String tunnelType) {
    this.tunnelType = tunnelType;
    return this;
  }

   /**
   * Get tunnelType
   * @return tunnelType
  **/
  @javax.annotation.Nullable
  public String getTunnelType() {
    return tunnelType;
  }

  public void setTunnelType(String tunnelType) {
    this.tunnelType = tunnelType;
  }


  public AgentPendingTunnel isDisabled(Boolean isDisabled) {
    this.isDisabled = isDisabled;
    return this;
  }

   /**
   * Get isDisabled
   * @return isDisabled
  **/
  @javax.annotation.Nonnull
  public Boolean getIsDisabled() {
    return isDisabled;
  }

  public void setIsDisabled(Boolean isDisabled) {
    this.isDisabled = isDisabled;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AgentPendingTunnel agentPendingTunnel = (AgentPendingTunnel) o;
    return Objects.equals(this.id, agentPendingTunnel.id) &&
        Objects.equals(this.name, agentPendingTunnel.name) &&
        Objects.equals(this.proto, agentPendingTunnel.proto) &&
        Objects.equals(this.portCount, agentPendingTunnel.portCount) &&
        Objects.equals(this.tunnelType, agentPendingTunnel.tunnelType) &&
        Objects.equals(this.isDisabled, agentPendingTunnel.isDisabled);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, name, proto, portCount, tunnelType, isDisabled);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AgentPendingTunnel {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    proto: ").append(toIndentedString(proto)).append("\n");
    sb.append("    portCount: ").append(toIndentedString(portCount)).append("\n");
    sb.append("    tunnelType: ").append(toIndentedString(tunnelType)).append("\n");
    sb.append("    isDisabled: ").append(toIndentedString(isDisabled)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("name");
    openapiFields.add("proto");
    openapiFields.add("port_count");
    openapiFields.add("tunnel_type");
    openapiFields.add("is_disabled");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("proto");
    openapiRequiredFields.add("port_count");
    openapiRequiredFields.add("is_disabled");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to AgentPendingTunnel
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AgentPendingTunnel.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AgentPendingTunnel is not found in the empty JSON string", AgentPendingTunnel.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AgentPendingTunnel.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AgentPendingTunnel` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AgentPendingTunnel.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the required field `proto`
      PortType.validateJsonElement(jsonObj.get("proto"));
      if ((jsonObj.get("tunnel_type") != null && !jsonObj.get("tunnel_type").isJsonNull()) && !jsonObj.get("tunnel_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tunnel_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tunnel_type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AgentPendingTunnel.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AgentPendingTunnel' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AgentPendingTunnel> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AgentPendingTunnel.class));

       return (TypeAdapter<T>) new TypeAdapter<AgentPendingTunnel>() {
           @Override
           public void write(JsonWriter out, AgentPendingTunnel value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AgentPendingTunnel read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of AgentPendingTunnel given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of AgentPendingTunnel
  * @throws IOException if the JSON string is invalid with respect to AgentPendingTunnel
  */
  public static AgentPendingTunnel fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AgentPendingTunnel.class);
  }

 /**
  * Convert an instance of AgentPendingTunnel to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

