/*
 * playit.gg's api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: unstable
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package gg.playit.api.models;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import gg.playit.api.models.AccountStatus;
import gg.playit.api.models.TotpStatus;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import gg.playit.JSON;

/**
 * WebAuth
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-02-08T12:14:41.539310597-08:00[America/Los_Angeles]")
public class WebAuth {
  public static final String SERIALIZED_NAME_UPDATE_VERSION = "update_version";
  @SerializedName(SERIALIZED_NAME_UPDATE_VERSION)
  private BigDecimal updateVersion;

  public static final String SERIALIZED_NAME_ACCOUNT_ID = "account_id";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_ID)
  private BigDecimal accountId;

  public static final String SERIALIZED_NAME_TIMESTAMP = "timestamp";
  @SerializedName(SERIALIZED_NAME_TIMESTAMP)
  private BigDecimal timestamp;

  public static final String SERIALIZED_NAME_ACCOUNT_STATUS = "account_status";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_STATUS)
  private AccountStatus accountStatus;

  public static final String SERIALIZED_NAME_TOTP_STATUS = "totp_status";
  @SerializedName(SERIALIZED_NAME_TOTP_STATUS)
  private TotpStatus totpStatus;

  public static final String SERIALIZED_NAME_ADMIN_ID = "admin_id";
  @SerializedName(SERIALIZED_NAME_ADMIN_ID)
  private BigDecimal adminId;

  public WebAuth() {
  }

  public WebAuth updateVersion(BigDecimal updateVersion) {
    this.updateVersion = updateVersion;
    return this;
  }

   /**
   * Get updateVersion
   * @return updateVersion
  **/
  @javax.annotation.Nonnull
  public BigDecimal getUpdateVersion() {
    return updateVersion;
  }

  public void setUpdateVersion(BigDecimal updateVersion) {
    this.updateVersion = updateVersion;
  }


  public WebAuth accountId(BigDecimal accountId) {
    this.accountId = accountId;
    return this;
  }

   /**
   * Get accountId
   * @return accountId
  **/
  @javax.annotation.Nonnull
  public BigDecimal getAccountId() {
    return accountId;
  }

  public void setAccountId(BigDecimal accountId) {
    this.accountId = accountId;
  }


  public WebAuth timestamp(BigDecimal timestamp) {
    this.timestamp = timestamp;
    return this;
  }

   /**
   * Get timestamp
   * @return timestamp
  **/
  @javax.annotation.Nonnull
  public BigDecimal getTimestamp() {
    return timestamp;
  }

  public void setTimestamp(BigDecimal timestamp) {
    this.timestamp = timestamp;
  }


  public WebAuth accountStatus(AccountStatus accountStatus) {
    this.accountStatus = accountStatus;
    return this;
  }

   /**
   * Get accountStatus
   * @return accountStatus
  **/
  @javax.annotation.Nonnull
  public AccountStatus getAccountStatus() {
    return accountStatus;
  }

  public void setAccountStatus(AccountStatus accountStatus) {
    this.accountStatus = accountStatus;
  }


  public WebAuth totpStatus(TotpStatus totpStatus) {
    this.totpStatus = totpStatus;
    return this;
  }

   /**
   * Get totpStatus
   * @return totpStatus
  **/
  @javax.annotation.Nonnull
  public TotpStatus getTotpStatus() {
    return totpStatus;
  }

  public void setTotpStatus(TotpStatus totpStatus) {
    this.totpStatus = totpStatus;
  }


  public WebAuth adminId(BigDecimal adminId) {
    this.adminId = adminId;
    return this;
  }

   /**
   * Get adminId
   * @return adminId
  **/
  @javax.annotation.Nullable
  public BigDecimal getAdminId() {
    return adminId;
  }

  public void setAdminId(BigDecimal adminId) {
    this.adminId = adminId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WebAuth webAuth = (WebAuth) o;
    return Objects.equals(this.updateVersion, webAuth.updateVersion) &&
        Objects.equals(this.accountId, webAuth.accountId) &&
        Objects.equals(this.timestamp, webAuth.timestamp) &&
        Objects.equals(this.accountStatus, webAuth.accountStatus) &&
        Objects.equals(this.totpStatus, webAuth.totpStatus) &&
        Objects.equals(this.adminId, webAuth.adminId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(updateVersion, accountId, timestamp, accountStatus, totpStatus, adminId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WebAuth {\n");
    sb.append("    updateVersion: ").append(toIndentedString(updateVersion)).append("\n");
    sb.append("    accountId: ").append(toIndentedString(accountId)).append("\n");
    sb.append("    timestamp: ").append(toIndentedString(timestamp)).append("\n");
    sb.append("    accountStatus: ").append(toIndentedString(accountStatus)).append("\n");
    sb.append("    totpStatus: ").append(toIndentedString(totpStatus)).append("\n");
    sb.append("    adminId: ").append(toIndentedString(adminId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("update_version");
    openapiFields.add("account_id");
    openapiFields.add("timestamp");
    openapiFields.add("account_status");
    openapiFields.add("totp_status");
    openapiFields.add("admin_id");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("update_version");
    openapiRequiredFields.add("account_id");
    openapiRequiredFields.add("timestamp");
    openapiRequiredFields.add("account_status");
    openapiRequiredFields.add("totp_status");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to WebAuth
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!WebAuth.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in WebAuth is not found in the empty JSON string", WebAuth.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!WebAuth.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `WebAuth` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : WebAuth.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `account_status`
      AccountStatus.validateJsonElement(jsonObj.get("account_status"));
      // validate the required field `totp_status`
      TotpStatus.validateJsonElement(jsonObj.get("totp_status"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!WebAuth.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'WebAuth' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<WebAuth> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(WebAuth.class));

       return (TypeAdapter<T>) new TypeAdapter<WebAuth>() {
           @Override
           public void write(JsonWriter out, WebAuth value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public WebAuth read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of WebAuth given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of WebAuth
  * @throws IOException if the JSON string is invalid with respect to WebAuth
  */
  public static WebAuth fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, WebAuth.class);
  }

 /**
  * Convert an instance of WebAuth to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

